# -*- coding: utf-8 -*-
"""Artifitial_Neural_Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11x44CVrhgeZFvGdAB9w9P5NUAqUJXEKW

##Importing The Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

tf.__version__

"""##Importing The Dataset"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:-1].values
Y = dataset.iloc[:,-1].values

print(X)

print(Y)

"""##Encoding Categorical Data

###Label Encdoing The Gender
"""

from sklearn.preprocessing import LabelEncoder
LabelEncoder = LabelEncoder()
X[:,2] = LabelEncoder.fit_transform(X[:,2])

print(X)

"""###One Hot Encoding The 'Geography' Column"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""##Splitting Dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state = 0)

"""##Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Building The ANN

###Initializing The ANN
"""

ann = tf.keras.models.Sequential()

"""###Adding The Input Layer and The First Hidden Layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""###Adding The Second Hidden Layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""###Adding The Output Layer"""

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""##Training The ANN

###Compiling The ANN
"""

ann.compile(optimizer= 'adam', loss='binary_crossentropy', metrics=['accuracy'])

"""###Trining The ANN on The Training Set"""

ann.fit(X_train, Y_train, batch_size=32, epochs=100)

"""##Making The Predictions and Evaluating The Model

###Predicting The Results of a Single Observation
"""

ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]]))

"""###Predicting The Test Set"""

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), Y_test.reshape(len(Y_test), 1)), 1))

"""###Creating The Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(Y_test, y_pred)
print("The Confusion Matrix:\n", cm)

"""###The Accuracy Score"""

print("The Accuracy Score:\n",accuracy_score(Y_test, y_pred))