# -*- coding: utf-8 -*-
"""Polynomial-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-lWZXF05Nf4x8AAJtYoglY0hgERQXjgq

## Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""##Importing Dataset"""

dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""##Training The Linear Regression Model on The Whole Dataset"""

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression()
linear_regressor.fit(X, y)

"""##Training The Polynomial Regression model

### Polynomial Regression Equation
$y = b_{0} + b_{1}x_{1} + b_{2}(x_{1})^2 + ... + b_{n}(x_{1})^n$

"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
print(X_poly)
lin_reg = LinearRegression()
lin_reg.fit(X_poly, y)

"""##Visualization The Linear Regression Results"""

plt.scatter(X, y, color ="red")
plt.plot(X, linear_regressor.predict(X))
plt.title("Truth or Blufff (Linear Regression)")
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.show()

"""##Visualization The Polynomial Regression Results"""

plt.scatter(X, y, color ="red")
plt.plot(X, lin_reg.predict(poly_reg.fit_transform(X)))
plt.title("Truth or Blufff (Polynomial Regression)")
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.show()

"""##Visualization The Polynomial Regression Results (for higher resolution and smoother curve)"""

X_grid = np.arange(min(X), max(X), 0.1)
X_grid = np.reshape(X_grid, (len(X_grid), 1))
plt.scatter(X, y, color ="red")
plt.plot(X_grid, lin_reg.predict(poly_reg.fit_transform(X_grid)))
plt.title("Truth or Blufff (Polynomial Regression)")
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.show()

"""##Predicting a New Result with Linear Regression



"""

y_pred = linear_regressor.predict([[6.5]])
print("The predicted salary for a level of 6.5 is: ", y_pred[0])

"""##Predicting a New Result with Polynomial Regression"""

y_pred = lin_reg.predict(poly_reg.fit_transform([[6.5]]))
print("The predicted salary for a level of 6.5 is: ", y_pred[0])